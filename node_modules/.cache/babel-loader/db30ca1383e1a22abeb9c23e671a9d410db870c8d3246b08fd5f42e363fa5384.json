{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Weather App\\\\react-weather-app\\\\react-weather-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState } from 'react';\n//the useState hook allows functional components to manage state\nimport axios from 'axios';\n//axios is used for making HTTP requests, it simpliefies the process of making asynchronous requests in JavaScript\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //declare functional component named App \n  //functional components are JavaScript functions that return JSX(JavaScript XML), which represents the UI of the component\n\n  const [city, setCity] = useState(''); //city is initialised to empty string, setCity is used to update it\n\n  const [weather, setWeather] = useState(null); //weather is declared, setWeather is used to update it\n\n  const apiKey = '1ccc73b386fa474b95e31343241202';\n  const fetchWeather = async () => {\n    //fetchWeather is responsible for fetching weather data from WeatherAPI.com\n    try {\n      const response = await axios.get(`https://api.weatherapi.com/v1/current.json?key=1ccc73b386fa474b95e31343241202&q=${city}&aqi=no`); //sends an HTTP 'get' request to the API using axios. \n      //Awaits the response and stores it in the 'response' variable. apiKey and city are interpolated into the URL to request specific data.\n\n      setWeather(response.data); //updates weather state variable with the retrieved data (contained in response.data)\n    } catch (error) {\n      console.error('Error fetching weather data: ', error); //logs message to console if there is any errors \n      setWeather(null);\n    }\n  };\n\n  //this block of JSX represents the UI of the 'App' component. \n  //It consists of a input field to enter city name, button to fetch weather data and a section to display weather info \n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: city,\n        onChange: e => setCity(e.target.value),\n        placeholder: \"Enter city name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchWeather,\n      children: \"Get Weather Info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), weather &&\n    /*#__PURE__*/\n    //if weather = true then the below block is displayed (weather && checks this condition)\n    _jsxDEV(\"div\", {\n      className: \"weather-data-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-location\",\n        children: [weather.location.name, \", \", weather.location.country]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-temperature\",\n        children: [\"Temperature (in Celsius): \", weather.current.temp_c, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-condition\",\n        children: [\"Condition: \", weather.current.condition.text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"Rlt+ue27S+f6rx/tpM2n2/OvG3k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","city","setCity","weather","setWeather","apiKey","fetchWeather","response","get","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","location","name","country","current","temp_c","condition","text","_c","$RefreshReg$"],"sources":["D:/Projects/Weather App/react-weather-app/react-weather-app/src/App.js"],"sourcesContent":["import './App.css';\nimport React, {useState} from 'react';\n//the useState hook allows functional components to manage state\nimport axios from 'axios'\n//axios is used for making HTTP requests, it simpliefies the process of making asynchronous requests in JavaScript\n\nfunction App(){//declare functional component named App \n//functional components are JavaScript functions that return JSX(JavaScript XML), which represents the UI of the component\n    \n    const [city, setCity] = useState('');//city is initialised to empty string, setCity is used to update it\n    \n    const [weather, setWeather] = useState(null);//weather is declared, setWeather is used to update it\n\n    const apiKey = '1ccc73b386fa474b95e31343241202';\n\n    const fetchWeather = async () => {//fetchWeather is responsible for fetching weather data from WeatherAPI.com\n        try{\n            const response = await axios.get(`https://api.weatherapi.com/v1/current.json?key=1ccc73b386fa474b95e31343241202&q=${city}&aqi=no`); //sends an HTTP 'get' request to the API using axios. \n            //Awaits the response and stores it in the 'response' variable. apiKey and city are interpolated into the URL to request specific data.\n            \n            setWeather(response.data);//updates weather state variable with the retrieved data (contained in response.data)\n        }\n        catch(error){\n            console.error('Error fetching weather data: ', error); //logs message to console if there is any errors \n            setWeather(null);\n        }\n    };\n\n    //this block of JSX represents the UI of the 'App' component. \n    //It consists of a input field to enter city name, button to fetch weather data and a section to display weather info \n    return (\n        <div className=\"weather-container\">\n        <h1>Weather App</h1>\n        <div className=\"input-container\">\n        <input \n            type=\"text\"\n            value={city}\n            onChange={(e) => setCity(e.target.value)}\n            placeholder=\"Enter city name\"\n        />\n        </div>\n        <button onClick={fetchWeather}>Get Weather Info</button>\n        \n        {weather && ( //if weather = true then the below block is displayed (weather && checks this condition)\n            <div className=\"weather-data-container\">\n            <div className=\"weather-location\">{weather.location.name}, {weather.location.country}</div>\n            <div className=\"weather-temperature\">Temperature (in Celsius): {weather.current.temp_c}Â°C</div>\n            <div className='weather-condition'>Condition: {weather.current.condition.text}</div>\n            </div>\n\n        )}\n        </div>\n    );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}